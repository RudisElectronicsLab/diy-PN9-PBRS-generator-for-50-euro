{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;\red52\green52\blue52;\red236\green241\blue245;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c26667\c26667\c26667;\cssrgb\c94118\c95686\c96863;\cssrgb\c0\c0\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww17580\viewh15580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs25 \cf2 \cb3 \expnd0\expndtw0\kerning0
Copy of {\field{\*\fldinst{HYPERLINK "https://www.eevblog.com/forum/testgear/looking-for-prbs-pn9-pn11-or-pn15-bit-sequences/msg5041624/#msg5041624"}}{\fldrslt https://www.eevblog.com/forum/testgear/looking-for-prbs-pn9-pn11-or-pn15-bit-sequences/msg5041624/#msg5041624}}\
\
\
Should anyone in the future be looking for such a code: I eventually sampled the PN9 output of a Rohde & Schwarz SMIQ3 vector signal generator. The procedure was as follows: \cf0 \cb1 \
\cf2 \cb3 -\'a0\'a0\'a0I defined a trigger output indicating the start of a new PN9 sequence,\cf0 \cb1 \
\cf2 \cb3 -\'a0\'a0\'a0I used a parallel bus decode on an oscilloscope to sample the PRBS code as well as the trigger output,\cf0 \cb1 \
\cf2 \cb3 -\'a0\'a0\'a0I captured a total of eight 511-bit sequences to ensure they were each time identical to each other (and they were).\cf0 \cb1 \
\
\cf2 \cb3 So, the sequence I found is:\cf0 \cb1 \
\
\cf2 \cb3 0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0\cf0 \cb1 \
\
\cf2 \cb3 The found PN9 code features a maximum of 8 subsequent 0\'92s and a maximum of 9 subsequent 1\'92s. \cf0 \cb1 \
\
\cf2 \cb3 Note that I show the code as individual bits, not hex codes. The reason is that the PN codes repeat themselves in 2^n-1 bits, so the PN9 code repeats itself in 2^9-1=511 bits. That does not translate nicely into a discrete number of hex codes. In other words, should you express, say, 10 subsequent PN9 sequences into HEX values, you do not see the HEX code repeating itself.}